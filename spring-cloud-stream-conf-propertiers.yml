#-----------------------------------------------------------------------------------------------
# KAFKA
#-----------------------------------------------------------------------------------------------
# - https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/
# - https://docs.spring.io/autorepo/docs/spring-cloud-stream-binder-kafka-docs/1.1.0.RELEASE/reference/htmlsingle/
spring.cloud.stream:
  instanceCount: # The number of deployed instances of an application. Must be set for partitioning and if using Kafka. Default: 1
  instanceIndex: # The instance index of the application: a number from 0 to instanceCount -1. Used for partitioning and with Kafka. Automatically set in Cloud Foundry to match the applicationâ€™s instance index
  dynamicDestinations: # A list of destinations that can be bound dynamically (for example, in a dynamic routing scenario). If set, only listed destinations can be bound. Default: empty (allowing any destination to be bound).
  defaultBinder: kafka # The default binder to use, if multiple binders are configured. See Multiple Binders on the Classpath.
  overrideCloudConnectors: # This property is only applicable when the cloud profile is active and Spring Cloud Connectors are provided with the application. If the property is false (the default), the binder will detect a suitable bound service
  schema.server: # boolean setting enables the deletion of schema. By default this is disabled.
    path: # The spring.cloud.stream.schema.server.path setting can be used to control the root path of the schema server (especially when it is embedded in other applications).
    allowSchemaDeletion: #
  schemaRegistryClient:
    endpoint: # The location of the schema-server. Use a full URL when setting this, including protocol (http or https) , port and context path. Default localhost:8990/
    cached: # Whether the client should cache schema server responses. Normally set to false, as the caching happens in the message converter. Clients using the schema registry client should set this to true. Default true
# Binding properties are supplied using the format spring.cloud.stream.bindings.<channelName>.<property>=<value>. The <channelName> represents the name of the channel being configured (e.g., output for a Source).
spring.cloud.stream.bindings:
  channel-name: # The channel
    destination: messagetype.datasetname.dataname # The target destination of a channel on the bound middleware (e.g., the RabbitMQ exchange or Kafka topic).
    group: group-1 # The consumer group of the channel. Applies only to inbound bindings. See Consumer Groups.
    content-type: application/json # The content type of the channel.
    binder: kafka # The binder used by this binding. See Multiple Binders on the Classpath for details.
    # The following binding properties are available for output bindings only and must be prefixed with spring.cloud.stream.bindings.<channelName>.producer., e.g. spring.cloud.stream.bindings.input.producer.partitionKeyExpression=payload.id.
    # Default values can be set by using the prefix spring.cloud.stream.default.producer, e.g. spring.cloud.stream.default.producer.partitionKeyExpression=payload.id.
    producer:
      partitionKeyExpression: # A SpEL expression that determines how to partition outbound data. If set, or if partitionKeyExtractorClass is set, outbound data on this channel will be partitioned, and partitionCount must be set to a value greater than 1 to be effective. The two options are mutually exclusive. See Partitioning Support.  Default: null.
      partitionKeyExtractorClass: # A PartitionKeyExtractorStrategy implementation. If set, or if partitionKeyExpression is set, outbound data on this channel will be partitioned, and partitionCount must be set to a value greater than 1 to be effective. The two options are mutually exclusive. See Partitioning Support. Default: null.
      partitionSelectorClass: # A PartitionSelectorStrategy implementation. Mutually exclusive with partitionSelectorExpression. If neither is set, the partition will be selected as the hashCode(key) % partitionCount, where key is computed via either partitionKeyExpression or partitionKeyExtractorClass. Default: null.
      partitionSelectorExpression: # A SpEL expression for customizing partition selection. Mutually exclusive with partitionSelectorClass. If neither is set, the partition will be selected as the hashCode(key) % partitionCount, where key is computed via either partitionKeyExpression or partitionKeyExtractorClass. Default: null.
      partitionCount: # The number of target partitions for the data, if partitioning is enabled. Must be set to a value greater than 1 if the producer is partitioned. On Kafka, interpreted as a hint; the larger of this and the partition count of the target topic is used instead. Default: 1.
      requiredGroups: # A comma-separated list of groups to which the producer must ensure message delivery even if they start after it has been created (e.g., by pre-creating durable queues in RabbitMQ). headerMode When set to raw, disables header embedding on output. Effective only for messaging middleware that does not support message headers natively and requires header embedding. Useful when producing data for non-Spring Cloud Stream applications. Default: embeddedHeaders.
      useNativeEncoding: # When set to true, the outbound message is serialized directly by client library, which must be configured correspondingly (e.g. setting an appropriate Kafka producer value serializer). When this configuration is being used, the outbound message marshalling is not based on the contentType of the binding. When native encoding is used, it is the responsibility of the consumer to use appropriate decoder (ex: Kafka consumer value de-serializer) to deserialize the inbound message. Also, when native encoding/decoding is used the headerMode property is ignored and headers will not be embedded into the message. Default: false.
      errorChannelEnabled: #When set to true, if the binder supports async send results; send failures will be sent to an error channel for the destination. See Message Channel Binders and Error Channels for more information. Default: false.
    # The following binding properties are available for input bindings only and must be prefixed with spring.cloud.stream.bindings.<channelName>.consumer., e.g. spring.cloud.stream.bindings.input.consumer.concurrency=3.
    # Default values can be set by using the prefix spring.cloud.stream.default.consumer, e.g. spring.cloud.stream.default.consumer.headerMode=raw.
    consumer:
      concurrency: # The concurrency of the inbound consumer. default 1
      partitioned: # Whether the consumer receives data from a partitioned producer. Default: false.
      headerMode: # When set to raw, disables header parsing on input. Effective only for messaging middleware that does not support message headers natively and requires header embedding. Useful when inbound data is coming from outside Spring Cloud Streamapplications. efault: embeddedHeaders.
      maxAttempts: # If processing fails, the number of attempts to process the message (including the first). Set to 1 to disable retry. Default: 3.
      backOffInitialInterval: # The backoff initial interval on retry. Default: 1000.
      backOffMaxInterval: # The maximum backoff interval. Default: 10000.
      backOffMultiplier: # The backoff multiplier. Default: 2.0.
      instanceIndex: # When set to a value greater than equal to zero, allows customizing the instance index of this consumer (if different from spring.cloud.stream.instanceIndex). When set to a negative value, it will default to spring.cloud.stream.instanceIndex. Default: -1.
      instanceCount: # When set to a value greater than equal to zero, allows customizing the instance count of this consumer (if different from spring.cloud.stream.instanceCount). When set to a negative value, it will default to spring.cloud.stream.instanceCount. Default: -1.
# To avoid repetition, Spring Cloud Stream supports setting values for all channels, in the format spring.cloud.stream.default.<property>=<value>.
# In what follows, we indicate where we have omitted the spring.cloud.stream.bindings.<channelName>. prefix and focus just on the property name, with the understanding that the prefix will be included at runtime.
spring.cloud.stream.default:
  content-type: application/json # The content type of the channel.
  producer:
    partitionKeyExpression: # A SpEL expression that determines how to partition outbound data. If set, or if partitionKeyExtractorClass is set, outbound data on this channel will be partitioned, and partitionCount must be set to a value greater than 1 to be effective. The two options are mutually exclusive. See Partitioning Support.  Default: null.
    partitionKeyExtractorClass: # A PartitionKeyExtractorStrategy implementation. If set, or if partitionKeyExpression is set, outbound data on this channel will be partitioned, and partitionCount must be set to a value greater than 1 to be effective. The two options are mutually exclusive. See Partitioning Support. Default: null.
    partitionSelectorClass: # A PartitionSelectorStrategy implementation. Mutually exclusive with partitionSelectorExpression. If neither is set, the partition will be selected as the hashCode(key) % partitionCount, where key is computed via either partitionKeyExpression or partitionKeyExtractorClass. Default: null.
    partitionSelectorExpression: # A SpEL expression for customizing partition selection. Mutually exclusive with partitionSelectorClass. If neither is set, the partition will be selected as the hashCode(key) % partitionCount, where key is computed via either partitionKeyExpression or partitionKeyExtractorClass. Default: null.
    partitionCount: # The number of target partitions for the data, if partitioning is enabled. Must be set to a value greater than 1 if the producer is partitioned. On Kafka, interpreted as a hint; the larger of this and the partition count of the target topic is used instead. Default: 1.
    requiredGroups: # A comma-separated list of groups to which the producer must ensure message delivery even if they start after it has been created (e.g., by pre-creating durable queues in RabbitMQ). headerMode When set to raw, disables header embedding on output. Effective only for messaging middleware that does not support message headers natively and requires header embedding. Useful when producing data for non-Spring Cloud Stream applications. Default: embeddedHeaders.
    useNativeEncoding: # When set to true, the outbound message is serialized directly by client library, which must be configured correspondingly (e.g. setting an appropriate Kafka producer value serializer). When this configuration is being used, the outbound message marshalling is not based on the contentType of the binding. When native encoding is used, it is the responsibility of the consumer to use appropriate decoder (ex: Kafka consumer value de-serializer) to deserialize the inbound message. Also, when native encoding/decoding is used the headerMode property is ignored and headers will not be embedded into the message. Default: false.
    errorChannelEnabled: #When set to true, if the binder supports async send results; send failures will be sent to an error channel for the destination. See Message Channel Binders and Error Channels for more information. Default: false.
  consumer:
    concurrency: # The concurrency of the inbound consumer. default 1
    partitioned: # Whether the consumer receives data from a partitioned producer. Default: false.
    headerMode: # When set to raw, disables header parsing on input. Effective only for messaging middleware that does not support message headers natively and requires header embedding. Useful when inbound data is coming from outside Spring Cloud Streamapplications. efault: embeddedHeaders.
    maxAttempts: # If processing fails, the number of attempts to process the message (including the first). Set to 1 to disable retry. Default: 3.
    backOffInitialInterval: # The backoff initial interval on retry. Default: 1000.
    backOffMaxInterval: # The maximum backoff interval. Default: 10000.
    backOffMultiplier: # The backoff multiplier. Default: 2.0.
    instanceIndex: # When set to a value greater than equal to zero, allows customizing the instance index of this consumer (if different from spring.cloud.stream.instanceIndex). When set to a negative value, it will default to spring.cloud.stream.instanceIndex. Default: -1.
    instanceCount: # When set to a value greater than equal to zero, allows customizing the instance count of this consumer (if different from spring.cloud.stream.instanceCount). When set to a negative value, it will default to spring.cloud.stream.instanceCount. Default: -1.
spring.cloud.stream.kafka.bindings:
  channel-name: # The channel
    producer:
      bufferSize: 33554432 # Upper limit, in bytes, of how much data the Kafka producer will attempt to batch before sending
      sync: false # Whether the producer is synchronous.
      batchTimeout: 1000 # How long the producer will wait before sending in order to allow more messages to accumulate in the same batch.
      messageKeyExpression: # A SpEL expression evaluated against the outgoing message used to populate the key of the produced Kafka message. For example headers.key or payload.myKey. Default: none.
      configuration: # Map with a key/value pair containing generic Kafka producer properties Default: Empty map.
        max:
          request:
            size: 999999999
  # The following properties are available for Kafka consumers only and must be prefixed with spring.cloud.stream.kafka.bindings.<channelName>.consumer.
    consumer:
      autoRebalanceEnabled: # When true, topic partitions will be automatically rebalanced between the members of a consumer group. When false, each consumer will be assigned a fixed set of partitions based on spring.cloud.stream.instanceCount and spring.cloud.stream.instanceIndex. This requires both spring.cloud.stream.instanceCount and spring.cloud.stream.instanceIndex properties to be set appropriately on each launched instance. The property spring.cloud.stream.instanceCount must typically be greater than 1 in this case. Default: true
      autoCommitOffset: # Whether to autocommit offsets when a message has been processed. If set to false, a header with the key kafka_acknowledgment of the type org.springframework.kafka.support.Acknowledgment header will be present in the inbound message. Applications may use this header for acknowledging messages. See the examples section for details. When this property is set to false, Kafka binder will set the ack mode to org.springframework.kafka.listener.AbstractMessageListenerContainer.AckMode.MANUAL. Default: true
      autoCommitOnError: # Effective only if autoCommitOffset is set to true. If set to false it suppresses auto-commits for messages that result in errors, and will commit only for successful messages, allows a stream to automatically replay from the last successfully processed message, in case of persistent failures. If set to true, it will always auto-commit (if auto-commit is enabled). If not set (default), it effectively has the same value as enableDlq, auto-committing erroneous messages if they are sent to a DLQ, and not committing them otherwise. Default: not set.
      recoveryInterval: # The interval between connection recovery attempts, in milliseconds. Default: 5000.
      startOffset: # The starting offset for new groups. Allowed values: earliest, latest. If the consumer group is set explicitly for the consumer 'binding' (via spring.cloud.stream.bindings.<channelName>.group), then 'startOffset' is set to earliest; otherwise it is set to latest for the anonymous consumer group. Default: null (equivalent to earliest).
      enableDlq: # When set to true, it will send enable DLQ behavior for the consumer. By default, messages that result in errors will be forwarded to a topic named error.<destination>.<group>. The DLQ topic name can be configurable via the property dlqName. This provides an alternative option to the more common Kafka replay scenario for the case when the number of errors is relatively small and replaying the entire original topic may be too cumbersome. Default: false. <destination>.<group>).
      configuration: # Map with a key/value pair containing generic Kafka consumer properties. Default: Empty map.
      dlqName: # The name of the DLQ topic to receive the error messages. Default: null (If not specified, messages that result in errors will be forwarded to a topic named error.
# By default, binders share the applicationâ€™s Spring Boot auto-configuration, so that one instance of each binder found on the classpath will be created. If your application should connect to more than one broker of the same type, you can specify multiple binder configurations, each with different environment settings.
spring.cloud.stream.binders:
  kafka-1:
    type: kafka
    environment:
      spring:
        cloud:
          stream:
            kafka:
              binder:
                brokers:  # A list of brokers to which the Kafka binder will connect. Default: localhost.
                defaultBrokerPort: 9092 # brokers allows hosts specified with or without port information (e.g., host1,host2:port2). This sets the default port when no port is configured in the broker list. Default: 9092.
                zkNodes:  # A list of ZooKeeper nodes to which the Kafka binder can connect. Default: localhost.
                defaultZkPort: 2181 # zkNodes allows hosts specified with or without port information (e.g., host1,host2:port2). This sets the default port when no port is configured in the node list. Default: 2181.
                configuration: # Key/Value map of client properties (both producers and consumer) passed to all clients created by the binder. Due to the fact that these properties will be used by both producers and consumers, usage should be restricted to common properties, especially security settings. Default: Empty map.
                headers: x-retries #  The list of custom headers that will be transported by the binder. Default: empty.
                healthTimeout: 10 # The time to wait to get partition information in seconds; default 60. Health will report as down if this timer expires.
                offsetUpdateTimeWindow: 10000 # The frequency, in milliseconds, with which offsets are saved. Ignored if 0.
                offsetUpdateCount: 0 # The frequency, in number of updates, which which consumed offsets are persisted. Ignored if 0. Mutually exclusive with offsetUpdateTimeWindow
                requiredAcks: 1 # The number of required acks on the broker.
                minPartitionCount: 1 # Effective only if autoCreateTopics or autoAddPartitions is set
                replicationFactor: 1 # The replication factor of auto-created topics if autoCreateTopics is active.
                autoCreateTopics: false # If set to true, the binder will create new topics automatically.
                autoAddPartitions: true # If set to true, the binder will create add new partitions if required
                socketBufferSize: 1000000000 # Size (in bytes) of the socket buffer to be used by the Kafka consumers.
spring.cloud.stream.kafka.binder:
  brokers:  # A list of brokers to which the Kafka binder will connect. Default: localhost.
  defaultBrokerPort: 9092 # brokers allows hosts specified with or without port information (e.g., host1,host2:port2). This sets the default port when no port is configured in the broker list. Default: 9092.
  zkNodes:  # A list of ZooKeeper nodes to which the Kafka binder can connect. Default: localhost.
  defaultZkPort: 2181 # zkNodes allows hosts specified with or without port information (e.g., host1,host2:port2). This sets the default port when no port is configured in the node list. Default: 2181.
  configuration: # Key/Value map of client properties (both producers and consumer) passed to all clients created by the binder. Due to the fact that these properties will be used by both producers and consumers, usage should be restricted to common properties, especially security settings. Default: Empty map.
  headers: x-retries #  The list of custom headers that will be transported by the binder. Default: empty.
  healthTimeout: 10 # The time to wait to get partition information in seconds; default 60. Health will report as down if this timer expires.
  offsetUpdateTimeWindow: 10000 # The frequency, in milliseconds, with which offsets are saved. Ignored if 0.
  offsetUpdateCount: 0 # The frequency, in number of updates, which which consumed offsets are persisted. Ignored if 0. Mutually exclusive with offsetUpdateTimeWindow
  requiredAcks: 1 # The number of required acks on the broker.
  minPartitionCount: 1 # Effective only if autoCreateTopics or autoAddPartitions is set
  replicationFactor: 1 # The replication factor of auto-created topics if autoCreateTopics is active.
  autoCreateTopics: false # If set to true, the binder will create new topics automatically.
  autoAddPartitions: true # If set to true, the binder will create add new partitions if required
  socketBufferSize: 1000000000 # Size (in bytes) of the socket buffer to be used by the Kafka consumers
spring.cloud.sleuth:
  json:
    enabled: true
